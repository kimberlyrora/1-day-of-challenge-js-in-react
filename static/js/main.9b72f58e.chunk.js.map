{"version":3,"sources":["drumKit.jsx","App.js","serviceWorker.js","index.js"],"names":["window","addEventListener","e","audio","document","querySelector","concat","keyCode","key","currentTime","play","then","elem","console","log","catch","classList","add","querySelectorAll","forEach","className","remove","DrumKit","react_default","a","createElement","Fragment","data-key","src","App","src_drumKit","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9b72f58e.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './drumKit.css'\r\n\r\n\r\n// const playAudio = () => {\r\n//   const audio= document.querySelector(`audio[data-key=\"${\"65\".keyCode}\"]`);\r\n//   audio.play();\r\n// }\r\n// const keys = document.querySelector('.key[data-key]=66');\r\n//   console.log(keys);\r\nconst playAudio = (e) => {\r\n  const audio = document.querySelector(`audio[data-key=\"${e.keyCode}\"]`);\r\n  const key = document.querySelector(`.key[data-key=\"${e.keyCode}\"]`)\r\n  if(!audio) return; //stop from running all together\r\n  audio.currentTime = 0; // rewind the audio\r\n  audio.play()\r\n  .then(elem => console.log('adios'))\r\n  .catch(elem => console.log(elem));\r\n  key.classList.add('playing');\r\n  const keys = document.querySelectorAll('.key');\r\n  keys.forEach(key => key.addEventListener('transitionend', () => {\r\n    if (key.className !== 'key playing') return;\r\n    key.classList.remove('playing');\r\n  }));\r\n}\r\nwindow.addEventListener('keydown', playAudio);\r\n\r\nconst DrumKit = () => {\r\n\treturn (\r\n\t<>\r\n\t<div className=\"keys\">\r\n    <div data-key=\"65\" className=\"key\">\r\n      <kbd>A</kbd>\r\n      <span className=\"sound\">clap</span>\r\n    </div>\r\n    <div data-key=\"83\" className=\"key\">\r\n      <kbd>S</kbd>\r\n      <span className=\"sound\">hihat</span>\r\n    </div>\r\n    <div data-key=\"68\" className=\"key\">\r\n      <kbd>D</kbd>\r\n      <span className=\"sound\">kick</span>\r\n    </div>\r\n    <div data-key=\"70\" className=\"key\">\r\n      <kbd>F</kbd>\r\n      <span className=\"sound\">openhat</span>\r\n    </div>\r\n    <div data-key=\"71\" className=\"key\">\r\n      <kbd>G</kbd>\r\n      <span className=\"sound\">boom</span>\r\n    </div>\r\n    <div data-key=\"72\" className=\"key\">\r\n      <kbd>H</kbd>\r\n      <span className=\"sound\">ride</span>\r\n    </div>\r\n    <div data-key=\"74\" className=\"key\">\r\n      <kbd>J</kbd>\r\n      <span className=\"sound\">snare</span>\r\n    </div>\r\n    <div data-key=\"75\" className=\"key\">\r\n      <kbd>K</kbd>\r\n      <span className=\"sound\">tom</span>\r\n    </div>\r\n    <div data-key=\"76\" className=\"key\">\r\n      <kbd>L</kbd>\r\n      <span className=\"sound\">tink</span>\r\n    </div>\r\n  </div>\r\n \r\n  <audio data-key=\"65\"  src=\"http://bringthenoise.weebly.com/uploads/2/1/6/7/2167979/808_clap.wav\"></audio>\r\n  <audio data-key=\"83\" src=\"http://orteil.dashnet.org/cookieclicker/snd/squish4.mp3\"></audio>\r\n  <audio data-key=\"68\" src=\"http://www.mario-museum.net/sons/smb_coup-de-pied.wav\"></audio>\r\n  <audio data-key=\"70\" src=\"http://www.burnkit2600.com/temp/HR-16/HR-16-WAVs/27-open%20hi%20hat.wav\"></audio>\r\n  <audio data-key=\"71\" src=\"http://www.coastcomp.com/av/fltline2/sounds/sboom.wav\"></audio>\r\n  <audio data-key=\"72\" src=\"http://dight310.byu.edu/media/audio/FreeLoops.com/4/4/Jazz%20Rides%20148-12426-Free-Loops.com.mp3\"></audio>\r\n  <audio data-key=\"74\" src=\"http://dight310.byu.edu/media/audio/FreeLoops.com/4/4/Hip%20Hop%20Snare%20Drum-20565-Free-Loops.com.mp3\"></audio>\r\n  <audio data-key=\"75\" src=\"http://www.footdrumplus.ca/uploads/3/4/8/6/34866267/s2-28.wav\"></audio>\r\n  <audio data-key=\"76\" src=\"http://tteacher.net/Flash/sound/cling_1.wav\"></audio> \r\n\r\n\t</>\r\n\t)\r\n}\r\n\r\n\r\nexport default DrumKit;\r\nDrumKit.propTypes={\r\ne: PropTypes.string\r\n};\r\n","import React from 'react';\r\nimport './App.css';\r\nimport DrumKit from './drumKit'\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <DrumKit />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}